"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
var chai_1 = require("chai");
describe("combine", function () {
    it("should throw errors if given bad input", function () {
        var sent = new nx.Sentence();
        chai_1.expect(function () { return sent.combine(); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine("a", "b"); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(1, 2); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine({}, {}); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine([], []); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sent.tokens[0]); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(null, sent.tokens[0]); }).to.throw(nx.NxError);
    });
    it("should throw errors if one the operands is a superToken or subTokens", function () {
        var sent = new nx.Sentence(nx.data.conllu.from_cg3_with_spans);
        var tok4 = sent.tokens[4];
        var sup = sent.tokens[5];
        var sub = sup.subTokens[0];
        var tok6 = sent.tokens[6];
        chai_1.expect(function () { return sent.combine(tok4, sup); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sup, tok4); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sup, sub); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sub, sup); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sup, tok6); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok6, sup); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok4, sub); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sub, tok4); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sub, sub); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sub, sub); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(sub, tok6); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok6, sub); }).to.throw(nx.NxError);
    });
    it("should throw errors if things aren't adjacent", function () {
        var sent = new nx.Sentence(nx.data.conllu.from_cg3_with_spans);
        var tok0 = sent.tokens[0];
        var tok1 = sent.tokens[1];
        var tok2 = sent.tokens[2];
        var tok7 = sent.tokens[7];
        chai_1.expect(function () { return sent.combine(tok0, tok2); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok2, tok0); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok0, tok7); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok7, tok0); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok1, tok7); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok7, tok1); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok2, tok7); }).to.throw(nx.NxError);
        chai_1.expect(function () { return sent.combine(tok7, tok2); }).to.throw(nx.NxError);
    });
    it("should combine correctly for simple sentences (R->L)", function () {
        var sent, tok0, tok1, sup, sub0, sub1;
        sent = new nx.Sentence("this is a simple sentence");
        tok0 = sent.tokens[0];
        tok1 = sent.tokens[1];
        chai_1.expect(sent.size).to.equal(5);
        chai_1.expect(sent.tokens.length).to.equal(5);
        chai_1.expect(sent.to("conllu").output).to.equal("1\tthis\t_\t_\t_\t_\t_\t_\t_\t_\n2\tis\t_\t_\t_\t_\t_\t_\t_\t_\n3\ta\t_\t_\t_\t_\t_\t_\t_\t_\n4\tsimple\t_\t_\t_\t_\t_\t_\t_\t_\n5\tsentence\t_\t_\t_\t_\t_\t_\t_\t_");
        sent.combine(tok0, tok1);
        sup = sent.tokens[0];
        sub0 = sup.subTokens[0];
        sub1 = sup.subTokens[1];
        chai_1.expect(sent.size).to.equal(6);
        chai_1.expect(sent.tokens.length).to.equal(4);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tthisis\t_\t_\t_\t_\t_\t_\t_\t_\n1\tthis\t_\t_\t_\t_\t_\t_\t_\t_\n2\tis\t_\t_\t_\t_\t_\t_\t_\t_\n3\ta\t_\t_\t_\t_\t_\t_\t_\t_\n4\tsimple\t_\t_\t_\t_\t_\t_\t_\t_\n5\tsentence\t_\t_\t_\t_\t_\t_\t_\t_");
    });
    it("should combine correctly for simple sentences (L->R)", function () {
        var sent, tok0, tok1, sup, sub0, sub1;
        sent = new nx.Sentence("this is a simple sentence");
        tok0 = sent.tokens[0];
        tok1 = sent.tokens[1];
        chai_1.expect(sent.size).to.equal(5);
        chai_1.expect(sent.tokens.length).to.equal(5);
        chai_1.expect(sent.to("conllu").output).to.equal("1\tthis\t_\t_\t_\t_\t_\t_\t_\t_\n2\tis\t_\t_\t_\t_\t_\t_\t_\t_\n3\ta\t_\t_\t_\t_\t_\t_\t_\t_\n4\tsimple\t_\t_\t_\t_\t_\t_\t_\t_\n5\tsentence\t_\t_\t_\t_\t_\t_\t_\t_");
        sent.combine(tok1, tok0);
        sup = sent.tokens[0];
        sub0 = sup.subTokens[0];
        sub1 = sup.subTokens[1];
        chai_1.expect(sent.size).to.equal(6);
        chai_1.expect(sent.tokens.length).to.equal(4);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tisthis\t_\t_\t_\t_\t_\t_\t_\t_\n1\tthis\t_\t_\t_\t_\t_\t_\t_\t_\n2\tis\t_\t_\t_\t_\t_\t_\t_\t_\n3\ta\t_\t_\t_\t_\t_\t_\t_\t_\n4\tsimple\t_\t_\t_\t_\t_\t_\t_\t_\n5\tsentence\t_\t_\t_\t_\t_\t_\t_\t_");
    });
    it("should combine correctly for sentences with dependencies", function () {
        var sent, tok0, tok1, tok2;
        var reset = function () {
            sent = new nx.Sentence("a b c");
            tok0 = sent.tokens[0];
            tok1 = sent.tokens[1];
            tok2 = sent.tokens[2];
            chai_1.expect(sent.size).to.equal(3);
            chai_1.expect(sent.tokens.length).to.equal(3);
            chai_1.expect(sent.to("conllu").output).to.equal("1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        };
        reset();
        tok0.addHead(tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1\ta\t_\t_\t_\t_\t2\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        sent.combine(tok0, tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tab\t_\t_\t_\t_\t_\t_\t_\t_\n1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        reset();
        tok1.addHead(tok0);
        chai_1.expect(sent.to("conllu").output).to.equal("1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t1\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        sent.combine(tok0, tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tab\t_\t_\t_\t_\t_\t_\t_\t_\n1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        reset();
        tok0.addHead(tok2);
        chai_1.expect(sent.to("conllu").output).to.equal("1\ta\t_\t_\t_\t_\t3\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        sent.combine(tok0, tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tab\t_\t_\t_\t_\t_\t_\t_\t_\n1\ta\t_\t_\t_\t_\t3\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        reset();
        tok2.addHead(tok0);
        chai_1.expect(sent.to("conllu").output).to.equal("1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t1\t_\t_\t_");
        sent.combine(tok0, tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tab\t_\t_\t_\t_\t_\t_\t_\t_\n1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t1\t_\t_\t_");
        reset();
        tok1.addHead(tok2);
        chai_1.expect(sent.to("conllu").output).to.equal("1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t3\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        sent.combine(tok0, tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tab\t_\t_\t_\t_\t_\t_\t_\t_\n1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t3\t_\t_\t_\n3\tc\t_\t_\t_\t_\t_\t_\t_\t_");
        reset();
        tok2.addHead(tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t2\t_\t_\t_");
        sent.combine(tok0, tok1);
        chai_1.expect(sent.to("conllu").output).to.equal("1-2\tab\t_\t_\t_\t_\t_\t_\t_\t_\n1\ta\t_\t_\t_\t_\t_\t_\t_\t_\n2\tb\t_\t_\t_\t_\t_\t_\t_\t_\n3\tc\t_\t_\t_\t_\t2\t_\t_\t_");
    });
    it("should combine even complicated sentences", function () {
        var sent = new nx.Sentence("# text = He boued e tebr Mona er gegin.\n# text[eng] = Mona eats her food here in the kitchen.\n# labels = press_1986 ch_syntax p_197 to_check\n1\tHe\the\tdet\t_\tpos|f|sp\t2\tdet\t_\t_\n2\tboued\tboued\tn\t_\tm|sg\t4\tobj\t_\t_\n3\te\te\tvpart\t_\tobj\t4\taux\t_\t_\n4\ttebr\tdebri\u00F1\tvblex\t_\tpri|p3|sg\t0\troot\t_\t_\n5\tMona\tMona\tnp\t_\tant|f|sg\t4\tnsubj\t_\t_\n6-7\ter\t_\t_\t_\t_\t_\t_\t_\t_\n6\t_\te\tpr\t_\t_\t8\tcase\t_\t_\n7\t_\tan\tdet\t_\tdef|sp\t8\tdet\t_\t_\n8\tgegin\tkegin\tn\t_\tf|sg\t4\tobl\t_\t_\n9\t.\t.\tsent\t_\t_\t4\tpunct\t_\t_");
        var tok6 = sent.tokens[6];
        var tok7 = sent.tokens[7];
        sent.combine(tok7, tok6);
        chai_1.expect(sent.to("conllu").output)
            .to.equal("# text = He boued e tebr Mona er gegin.\n# text[eng] = Mona eats her food here in the kitchen.\n# labels = press_1986 ch_syntax p_197 to_check\n1\tHe\the\tdet\t_\tpos|f|sp\t2\tdet\t_\t_\n2\tboued\tboued\tn\t_\tm|sg\t4\tobj\t_\t_\n3\te\te\tvpart\t_\tobj\t4\taux\t_\t_\n4\ttebr\tdebri\u00F1\tvblex\t_\tpri|p3|sg\t0\troot\t_\t_\n5\tMona\tMona\tnp\t_\tant|f|sg\t4\tnsubj\t_\t_\n6-7\ter\t_\t_\t_\t_\t_\t_\t_\t_\n6\t_\te\tpr\t_\t_\t8\tcase\t_\t_\n7\t_\tan\tdet\t_\tdef|sp\t8\tdet\t_\t_\n8-9\t.gegin\t_\t_\t_\t_\t_\t_\t_\t_\n8\tgegin\tkegin\tn\t_\tf|sg\t4\tobl\t_\t_\n9\t.\t.\tsent\t_\t_\t4\tpunct\t_\t_");
    });
});
//# sourceMappingURL=combine.js.map